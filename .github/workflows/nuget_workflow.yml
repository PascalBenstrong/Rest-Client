name: Release to Nuget

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    branches: [ master, nuget ]

env:
  TAG_NAME: ${{ github.event.release.tag_name }} 
  PROJECT_PATH: ./RestApiClient.NetStandard
  ARTIFACT_NAME: TheProcessE.RestClient
  PACKAGE_RELEASE_NOTES_URL: https://github.com/PascalBenstrong/Rest-Client/releases/tag/
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: https://api.nuget.org/v3/index.json
  NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
  GITHUB_REPO_URL: https://github.com/$GITHUB_REPOSITORY 
  GITHUB_SOURCE_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301

      - name: Run Tests
        run: dotnet test

      - name: Build Project
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

      - name: Get Version
        id: version
        uses: battila7/get-version-action@v2

      - name: Create Nuget Package
        run: dotnet pack ${{ env.PROJECT_PATH }} -c Release --no-restore --include-symbols --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} -p:PackageVersion=${{ steps.version.outputs.version-without-v }} -p:PackageReleaseNotes="See ${{ env.PACKAGE_RELEASE_NOTES_URL }}${{ steps.version.outputs.version }}" -p:RepositoryUrl="${{ env.GITHUB_REPO_URL }}"

      - name: Push Package to Nuget
        run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg --skip-duplicate -k ${{ env.NUGET_AUTH_TOKEN }} -s ${{ env.NUGET_SOURCE_URL }}
        
      - name: Push Package to GitHub
        run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg --skip-duplicate -k ${{ secrets.GITHUB_TOKEN }} -s ${{ env.GITHUB_SOURCE_URL }}

      - name: Archive Nuget Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}.${{ steps.version.outputs.version-without-v }}.nupkg
          path: '${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg'
          
      - name: Zip Archive
        run: |
          zip --junk-paths ${{ env.ARTIFACT_NAME }}.${{ steps.version.outputs.version-without-v }}.zip ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ env.ARTIFACT_NAME }}.${{ steps.version.outputs.version-without-v }}.zip
          asset_name: ${{ env.ARTIFACT_NAME }}.${{ steps.version.outputs.version-without-v }}.nupkg.zip
          asset_content_type: application/zip
